rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /* Public Registration: allow reads (for admin page) and creates with basic validation */
    match /registrations/{docId} {
      allow read: if true;
      allow create: if
        request.time < timestamp.date(2025, 12, 31) &&
        request.resource.data.username is string &&
        request.resource.data.username.size() >= 2 &&
        request.resource.data.course in ['BBA', 'BCA', 'BCOM'] &&
        request.resource.data.year in ['1','2','3'] &&
        request.resource.data.college is string &&
        request.resource.data.college.size() >= 2 &&
        request.resource.data.phone is string &&
        request.resource.data.phone.matches('^\\d{10,15}$') &&
        request.resource.data.shortId is string &&
        request.resource.data.shortId.matches('^\\d{3}$') &&
        request.resource.data.ip is string &&
        request.resource.data.keys().hasOnly(['username','course','year','college','phone','ip','shortId','createdAt']);

      /* allow updating payment fields only */
      allow update: if
        request.resource.data.diff(resource.data).changedKeys().hasOnly(['paymentMode','paymentAt']) &&
        request.resource.data.paymentMode in ['onspot','online'];

      /* prevent deletes from the public */
      allow delete: if false;
    }

    /* Error logs: allow create from clients, reads for admin UI usage */
    match /errorLogs/{docId} {
      allow create: if request.resource.data.type is string &&
                     request.resource.data.message is string &&
                     request.resource.data.keys().hasAny(['details','timestamp','type','message']);
      allow read: if true; // set to false if you don't want to expose error logs publicly
      allow update, delete: if false;
    }

    /* Payment/mode selections: allow create from success page */
    match /payments/{docId} {
      allow create: if request.resource.data.tokenNo is string &&
                     request.resource.data.username is string &&
                     request.resource.data.mode in ['onspot', 'online'] &&
                     request.resource.data.keys().hasOnly(['tokenNo','username','mode','createdAt']);
      allow read: if true; // for admin panel access
      allow update, delete: if false;
    }

    /* Deny everything else by default */
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
